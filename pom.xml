<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>neptunedreams.com</groupId>
  <artifactId>job.search</artifactId>
  <version>${revision}${sha1}${changelist}</version>
<!--  Due to a strange bug in the Maven Bundle plug-in, if a project.name element exists, it uses that as the -->
<!--  name of the bundled application, instead of the value specified by CFBundleDisplayName in the plugin-->
<!--  Configuration. -->
<!--  <name>Job Search</name>-->
  <packaging>jar</packaging>

  <url>https://maven.apache.org</url>
  <developers>
    <developer>
      <id>SwingGuy1024</id>
      <name>Miguel Mu√±oz</name>
      <email>SwingGuy1024@yahoo.com</email>
    </developer>
  </developers>
	
	<!--
	Note: The checker framework documentation says to include some references to a Google library called "errorProne."
	It should be a dependency, have a property set to refer to it, and should have a compiler argument set.
	However, if I do this, I break the build. The solution is to remove the compiler argument. That argument is this:
	<arg>-J-Xbootclasspath/p:${errorProneJavac}</arg>
	-->

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.release>17</maven.compiler.release>

    <!--  See https://maven.apache.org/maven-ci-friendly.html#Multi_Module_Setup  -->
    <revision>1.0.3</revision>
    <changelist>-SNAPSHOT</changelist>
    <sha1/>

    <!-- These properties will be set by the Maven Dependency plugin -->
    <!--suppress UnresolvedMavenProperty -->
    <annotatedJdk>${org.checkerframework:jdk8:jar}</annotatedJdk>
    <!--suppress UnresolvedMavenProperty -->
    <errorProneJavac>${com.google.errorprone:javac:jar}</errorProneJavac>
    <jooqVersion>3.12.3</jooqVersion>
    <!-- Uncomment to use the Type Annotations compiler. -->
    <!--<typeAnnotationsJavac>${org.checkerframework:compiler:jar}</typeAnnotationsJavac> -->
    
    <iconFile>src/main/resources/binoculars.icns</iconFile>
    <mainClass>com.neptunedreams.jobs.JobSearch</mainClass>
    <appName>Job Search Prop</appName>
    <tango.version>2.0.26-SNAPSHOT</tango.version>
  </properties>

  <dependencies>
	  <dependency>
		  <groupId>com.neptunedreams</groupId>
		  <artifactId>tango</artifactId>
        <version>${tango.version}</version>
      </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.2</version>
      <scope>test</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
    <dependency>
      <groupId>org.xerial</groupId>
      <artifactId>sqlite-jdbc</artifactId>
      <version>3.42.0.0</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.jetbrains/annotations -->
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>23.0.0</version>
    </dependency>

    <!--jOOQ-->
	  <!-- https://mvnrepository.com/artifact/org.jooq/jooq -->
	  <dependency>
		  <groupId>org.jooq</groupId>
		  <artifactId>jooq</artifactId>
		  <version>${jooqVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>2.2</version>
      <scope>test</scope>
    </dependency>

    <!-- Annotations from the Checker Framework: nullness, interning, locking, ... -->
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
      <version>3.39.0</version>
    </dependency>

    <dependency>
      <groupId>com.formdev</groupId>
      <artifactId>flatlaf</artifactId>
      <version>3.2.2</version>
    </dependency>
  </dependencies>
  
  <build>
    <plugins>
      <!--This is the standard Maven compiler plugin-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <fork>true</fork>
          <source>17</source>
          <target>17</target>
<!--          <compilerArguments>-->
<!--            <Xmaxerrs>10000</Xmaxerrs>-->
<!--            <Xmaxwarns>10000</Xmaxwarns>-->
            <!--<AsuppressWarnings>uninitialized</AsuppressWarnings>-->
<!--          </compilerArguments>-->
          <!-- Reveals bugs in stubs. -->
          <showWarnings>true</showWarnings>
          <annotationProcessorPaths>
            <path>
              <groupId>org.checkerframework</groupId>
              <artifactId>checker</artifactId>
              <version>3.39.0</version>
            </path>
          </annotationProcessorPaths>
          <annotationProcessors>
            <!-- Add all the checkers you want to enable here -->

            <!-- Invoke the NullnessChecker at org.checkerframework.checker.nullness.NullnessChecker -->
            <!-- There are probably other checkers we should invoke. -->
            <annotationProcessor>org.checkerframework.checker.nullness.NullnessChecker</annotationProcessor>
          </annotationProcessors>
          <compilerArgs>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</arg>
            <arg>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</arg>
            <arg>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg>

            <!-- Optionally, -Awarns turns type-checking errors into warnings. -->
<!--            <arg>-Awarns</arg>-->

<!--            <arg>-Astubs=checkerframework/stubs</arg> &lt;!&ndash; Suggested by https://github.com/typetools/checker-framework/issues/445 &ndash;&gt;-->
            <!--<arg>-AstubWarnIfNotFound</arg>-->
            <arg>-Astubs=nullness-stub/</arg>
            <arg>-AstubWarnIfNotFound</arg>
          </compilerArgs>
        </configuration>
        <!-- I don't know if I need this. -->
<!--        <version>3.8.1</version>-->
      </plugin>

      <!--   See https://www.baeldung.com/java-accessing-maven-properties   -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>${project.build.outputDirectory}/pom.properties</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <systemPropertyVariables>
<!--            <derby.system.home>${user.home}/.jobsearch}</derby.system.home>-->
            <buildDirectory>${project.build.directory}</buildDirectory>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <!--This packs all the classes into a single jar-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.6.0</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>${mainClass}</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <!--This "appendAssemblyId" tag removes the "with-dependencies" from the name.-->
	        <!--This is commented out because it overwrites the other jar file.-->
	        <!--That interferes with the creation of the Mac App Bundle.-->
          <!--<appendAssemblyId>false</appendAssemblyId>-->
        </configuration>
      </plugin>

      <plugin>
        <!--This is the Maven dependency plugin.-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.1.1</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/libs
              </outputDirectory>
            </configuration>
          </execution>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--This creates an executable jar file. It should be used with the maven-dependency-plugin-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>${mainClass}</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      
      <!--      This is an alternate plugin to bundle everything into a Mac Application Bundle, which-->
      <!--      I added to support Java 17.-->
      <!-- Source: https://github.com/perdian/macosappbundler-maven-plugin -->
      <plugin>
        <groupId>de.perdian.maven.plugins</groupId>
        <artifactId>macosappbundler-maven-plugin</artifactId>
        <version>1.20.0</version>
        <configuration>
          <plist>
            <JVMMainClassName>${mainClass}</JVMMainClassName>

            <CFBundleIconFile>${iconFile}</CFBundleIconFile>
            <CFBundleName>Job Search</CFBundleName>
            <CFBundleDisplayName>${appName}</CFBundleDisplayName>
            <CFBundleDevelopmentRegion>English</CFBundleDevelopmentRegion>
            <!--            <CFBundleURLTypes>-->
            <!--              <string>msa</string>-->
            <!--            </CFBundleURLTypes>-->
            <JVMVersion>17+</JVMVersion>
            <!--            <JVMRuntimePath>(unused)</JVMRuntimePath>-->
            <!--            <JVMOptions>-->
            <!--              <string>-Dfoo=bar</string>-->
            <!--              <string>-Dx=y</string>-->
            <!--            </JVMOptions>-->
            <!--            <JVMArguments>-->
            <!--              <string>-example</string>-->
            <!--              <string>${someProperty}</string>-->
            <!--            </JVMArguments>-->
          </plist>
<!--          <codesign>-->
<!--            <identity>3rd Party Mac Developer Application: MyName (MyNumber)</identity>-->
<!--          </codesign>-->
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>bundle</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--This is the jooq code generation plugin-->
      <plugin>

        <!-- Specify the maven code generator plugin -->
        <!-- Use org.jooq        for the Open Source Edition
             org.jooq.pro        for commercial editions, 
             org.jooq.pro-java-6 for commercial editions with Java 6 support,
             org.jooq.trial      for the free trial edition 

             Note: Only the Open Source Edition is hosted on Maven Central. 
             Import the others manually from your distribution -->
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <version>${jooqVersion}</version>

        <!-- The plugin should hook into the generate goal -->
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>

        <!-- Manage the plugin's dependency. -->
        <dependencies>
          <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.41.2.2</version>
          </dependency>
        </dependencies>

        <!-- Specify the plugin configuration.
						 The configuration format is the same as for the standalone code generator -->
        <configuration>

          <!-- JDBC connection parameters -->
          <jdbc>
            <!--<driver>org.apache.derby.jdbc.EmbeddedDriver</driver>-->
            <!--<url>jdbc:derby:jobs;create=true;collation=TERRITORY_BASED:PRIMARY</url>-->
            <driver>org.sqlite.JDBC</driver>
            <url>jdbc:sqlite:src/main/resources/sql/generateFromJobs.db</url>
            <!--<user>postgres</user>-->
            <!--<password>test</password>-->
          </jdbc>

          <!-- Generator parameters -->
          <generator>
            <database>
              <name>org.jooq.meta.sqlite.SQLiteDatabase</name>
              <includes>.*</includes>
              <!--<excludes></excludes>-->
              <!-- In case your database supports catalogs, e.g. SQL Server:
							<inputCatalog>public</inputCatalog>
								-->
              <!--<inputSchema>jobs</inputSchema>-->
              <!--<inputSchema>public</inputSchema>-->
            </database>
            <target>
              <packageName>com.neptunedreams.jobs.gen</packageName>
              <directory>src/gen/java</directory>
            </target>
          </generator>
        </configuration>
      </plugin>

      <!-- Allows user to launch from maven: mvn exec:java -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <mainClass>${mainClass}</mainClass>
          <cleanupDaemonThreads>false</cleanupDaemonThreads>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
