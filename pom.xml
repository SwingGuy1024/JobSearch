<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>neptunedreams.com</groupId>
  <artifactId>job.search</artifactId>
  <version>0.2.11-SNAPSHOT</version>
  <name>Job Search</name>
  <packaging>jar</packaging>

  <url>http://maven.apache.org</url>
  <developers>
    <developer>
      <id>SwingGuy1024</id>
      <name>Miguel Mu√±oz</name>
      <email>SwingGuy1024@yahoo.com</email>
    </developer>
  </developers>
	
	<!--
	Note: The checker framework documentation says to include some references to a google library called "errorProne."
	It should be a dependency, have a property set to refer to it, and should have a compiler argument set.
	However, if I do this, I break the build. The solution is to remove the compiler argument. That argument is this:
	<arg>-J-Xbootclasspath/p:${errorProneJavac}</arg>
	-->

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- These properties will be set by the Maven Dependency plugin -->
    <!--suppress UnresolvedMavenProperty -->
    <annotatedJdk>${org.checkerframework:jdk8:jar}</annotatedJdk>
    <!--suppress UnresolvedMavenProperty -->
    <errorProneJavac>${com.google.errorprone:javac:jar}</errorProneJavac>
    <!-- Uncomment to use the Type Annotations compiler. -->
    <!--<typeAnnotationsJavac>${org.checkerframework:compiler:jar}</typeAnnotationsJavac> -->
    <jooqVersion>3.12.3</jooqVersion>
  </properties>

  <dependencies>
	  <dependency>
		  <groupId>com.neptunedreams</groupId>
		  <artifactId>tango</artifactId>
		  <version>2.0.11-SNAPSHOT</version>
	  </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>


    <!-- https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc -->
    <dependency>
      <groupId>org.xerial</groupId>
      <artifactId>sqlite-jdbc</artifactId>
      <version>3.20.1</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.jetbrains/annotations -->
    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>13.0</version>
    </dependency>

    <!--jOOQ-->
	  <!-- https://mvnrepository.com/artifact/org.jooq/jooq -->
	  <dependency>
		  <groupId>org.jooq</groupId>
		  <artifactId>jooq</artifactId>
		  <version>${jooqVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>1.1</version>
      <scope>test</scope>
    </dependency>

    <!-- Annotations from the Checker Framework: nullness, interning, locking, ... -->
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-qual</artifactId>
      <version>3.2.0</version>
    </dependency>
    <!-- If using JDK 8, add the following additional dependencies -->
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>jdk8</artifactId>
      <version>3.2.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>javac</artifactId>
      <version>9+181-r4173-1</version>
    </dependency>

  </dependencies>
  
  <build>
    <plugins>
      <!--This is the standard Maven compiler plugin-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <fork>true</fork>
          <source>1.8</source>
          <target>1.8</target>
          <compilerArguments>
            <Xmaxerrs>10000</Xmaxerrs>
            <Xmaxwarns>10000</Xmaxwarns>
            <!--<AsuppressWarnings>uninitialized</AsuppressWarnings>-->
          </compilerArguments>
          <!-- Reveals bugs in stubs. -->
          <showWarnings>true</showWarnings>
          <annotationProcessorPaths>
            <path>
              <groupId>org.checkerframework</groupId>
              <artifactId>checker</artifactId>
              <version>3.2.0</version>
            </path>
          </annotationProcessorPaths>
          <annotationProcessors>
            <!-- Add all the checkers you want to enable here -->

            <!-- Invoke the NullnessChecker at org.checkerframework.checker.nullness.NullnessChecker -->
            <!-- There are probably other checkers we should invoke. -->
            <annotationProcessor>org.checkerframework.checker.nullness.NullnessChecker</annotationProcessor>
          </annotationProcessors>
          <compilerArgs>
            <!-- If using JDK 8, use only the two arguments immediately below. -->
            <arg>-J-Xbootclasspath/p:${errorProneJavac}</arg>
            <arg>-Xbootclasspath/p:${annotatedJdk}</arg>
            <!-- If using JDK 11, remove the two arguments above, remove the
								 space in the one below, and uncomment it. -->
            <!-- <arg>-J- -add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</arg> -->

            <!-- Optionally, -Awarns turns type-checking errors into warnings. -->
<!--            <arg>-Awarns</arg>-->

<!--            <arg>-Astubs=checkerframework/stubs</arg> &lt;!&ndash; Suggested by https://github.com/typetools/checker-framework/issues/445 &ndash;&gt;-->
            <!--<arg>-AstubWarnIfNotFound</arg>-->
            <arg>-Astubs=nullness-stub/</arg>
            <arg>-AstubWarnIfNotFound</arg>
          </compilerArgs>
        </configuration>
        <version>3.8.1</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <systemPropertyVariables>
            <derby.system.home>${user.home}/.jobsearch}</derby.system.home>
            <buildDirectory>${project.build.directory}</buildDirectory>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <!--This packs all the classes into a single jar-->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <mainClass>com.neptunedreams.jobs.JobSearch</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <!--This "appendAssemblyId" tag removes the "with-dependencies" from the name.-->
	        <!--This is commented out because it overwrites the other jar file.-->
	        <!--That interferes with the creation of the Mac App Bundle.-->
          <!--<appendAssemblyId>false</appendAssemblyId>-->
        </configuration>
      </plugin>

      <plugin>
        <!--This is the Maven dependency plugin.-->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/libs
              </outputDirectory>
            </configuration>
          </execution>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--This creates an executable jar file. It should be used with the maven-dependency-plugin-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <!--<detail>-->
            <!--<derby.system.home>${user.home}/.jobs</derby.system.home>-->
          <!--</detail>-->
          <archive>
            <manifest>
              <mainClass>com.neptunedreams.jobs.JobSearch</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
      
      <!--This one will bundle everything into a Mac Application bundle.-->
      <plugin>
        <!-- https://github.com/federkasten/appbundle-maven-plugin -->
        <groupId>sh.tak.appbundler</groupId>
        <artifactId>appbundle-maven-plugin</artifactId>
        <version>1.2.0</version>
        <configuration>
          <!--Put your custom Info.plist and Icon.icns under your maven resource paths (src/main/resources on default configuration).-->
          <mainClass>com.neptunedreams.jobs.JobSearch</mainClass>
          <!--<dictionaryFile>YourCustomInfo.plist</dictionaryFile>-->
          <iconFile>binoculars.icns</iconFile>
          <!-- Put this line in to bundle the jdk with the app. -->
          <!--suppress UnresolvedMavenProperty -->
<!--          <jrePath>${env.JAVA_HOME}/../../</jrePath>-->
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>bundle</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--This is the jooq code generation plugin-->
      <plugin>

        <!-- Specify the maven code generator plugin -->
        <!-- Use org.jooq            for the Open Source Edition
								 org.jooq.pro        for commercial editions, 
								 org.jooq.pro-java-6 for commercial editions with Java 6 support,
								 org.jooq.trial      for the free trial edition 
							 
						 Note: Only the Open Source Edition is hosted on Maven Central. 
									 Import the others manually from your distribution -->
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <version>${jooqVersion}</version>

        <!-- The plugin should hook into the generate goal -->
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>

        <!-- Manage the plugin's dependency. -->
        <dependencies>
          <dependency>
            <!--<groupId>org.apache.derby</groupId>-->
            <!--<artifactId>derby</artifactId>-->
            <!--<version>10.14.1.0</version>-->
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.20.1</version>
          </dependency>
          <!-- https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api -->
          <!--<dependency>-->
            <!--<groupId>javax.xml.bind</groupId>-->
            <!--<artifactId>jaxb-api</artifactId>-->
            <!--<version>2.3.1</version>-->
          <!--</dependency>-->
        </dependencies>

        <!-- Specify the plugin configuration.
						 The configuration format is the same as for the standalone code generator -->
        <configuration>

          <!-- JDBC connection parameters -->
          <jdbc>
            <!--<driver>org.apache.derby.jdbc.EmbeddedDriver</driver>-->
            <!--<url>jdbc:derby:jobs;create=true;collation=TERRITORY_BASED:PRIMARY</url>-->
            <driver>org.sqlite.JDBC</driver>
            <url>jdbc:sqlite:src/main/resources/sql/generateFromJobs.db</url>
            <!--<user>postgres</user>-->
            <!--<password>test</password>-->
          </jdbc>

          <!-- Generator parameters -->
          <generator>
            <database>
              <!--<name>org.jooq.util.derby.DerbyDatabase</name>-->
              <name>org.jooq.meta.sqlite.SQLiteDatabase</name>
              <includes>.*</includes>
              <!--<excludes></excludes>-->
              <!-- In case your database supports catalogs, e.g. SQL Server:
							<inputCatalog>public</inputCatalog>
								-->
              <!--<inputSchema>jobs</inputSchema>-->
              <!--<inputSchema>public</inputSchema>-->
            </database>
            <target>
              <packageName>com.neptunedreams.jobs.gen</packageName>
              <directory>src/gen/java</directory>
            </target>
          </generator>
        </configuration>
      </plugin>

      <!-- Allows user to launch from maven: mvn exec:java -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <mainClass>com.neptunedreams.jobs.JobSearch</mainClass>
          <cleanupDaemonThreads>false</cleanupDaemonThreads>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
